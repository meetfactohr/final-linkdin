You are an expert Python developer. Build me a complete, production-ready bulk LinkedIn–Apollo email finder system.

## 🎯 Purpose
I want to input a list of company domains and a list of target roles (like CEO, HR Head, Marketer).  
The system should automatically:
1. Search Google (via Custom Search API) for each domain–role pair.
2. Visit the LinkedIn profile (via Playwright) to extract name, title, and company.
3. Use Apollo API to find the person’s verified email.
4. If Apollo fails, try Hunter.io API as backup.
5. Save results in CSV with all details.

---

## ⚙️ Workflow Logic

### Step 1 — Search via Google Custom Search API
For each `(domain, role)` pair:
- Query: `site:linkedin.com/in ("<ROLE>") "<DOMAIN>"`
- Extract the first valid LinkedIn profile URL.

### Step 2 — Visit LinkedIn Profile (Playwright)
- Launch Playwright (headless Chromium).
- Visit profile URL.
- Extract:
  - Full name (`h1`)
  - Title / headline (`h2`)
  - Company
  - Location

### Step 3 — Find Email (Apollo API)
Use Apollo API:
POST https://api.apollo.io/v1/mixed_people/search
Payload:
{
"q_organization_domains": ["example.com"],
"person_titles": ["CEO"],
"api_key": "YOUR_APOLLO_API_KEY"
}

perl
Copy code
If email found → save record.  
If not found → continue to next role.

### Step 4 — Fallback APIs
If Apollo fails:
- Try Hunter.io email finder (`https://api.hunter.io/v2/email-finder`)
- Add support for multiple API keys (rotate automatically to avoid rate limits).

### Step 5 — Save Output
Save all results to `data/results.csv` with:
domain | name | title | email | linkedin_url | matched_role | source

yaml
Copy code

---

## 🧩 Folder Structure
linkedin-email-finder/
│
├── src/
│ ├── main.py # main entry point
│ ├── search_google.py # Google Custom Search logic
│ ├── linkedin_scraper.py # Playwright scraper
│ ├── email_finder_apollo.py # Apollo email finder
│ ├── email_finder_hunter.py # Hunter fallback
│ └── utils.py # CSV writer, proxy, rate limiter
│
├── data/
│ ├── domains.txt
│ ├── roles.txt
│ └── results.csv
│
├── .env
├── requirements.txt
└── README.md

yaml
Copy code

---

## 🧰 Tech Stack & Dependencies
playwright
requests
pandas
python-dotenv
aiohttp
beautifulsoup4

yaml
Copy code

---

## 💡 Features to Include
| Feature | Description |
|----------|--------------|
| Rate Limiter | Use asyncio.Semaphore or random sleep 2–5s between calls |
| Parallel Execution | Run 5–10 domain-role pairs concurrently |
| Proxy Rotation | Rotate residential proxies for LinkedIn visits |
| Error Handling | Retry failed APIs and skip CAPTCHA pages |
| API Key Rotation | Use multiple Apollo/Hunter keys automatically |
| CSV Logging | Append results incrementally, not overwrite |

---

## ⚙️ Deliverables
1. Complete Python code with all modules and `.env` support  
2. Playwright integration for real LinkedIn profile data  
3. Apollo + Hunter email enrichment with fallback logic  
4. CSV export with append mode  
5. Instructions to run the script: